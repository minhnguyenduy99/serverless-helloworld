service: api-with-auth

custom:
  secrets: ${file(secrets.json)}
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  environment:
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    DB: ${self:custom.secrets.DB}
    USER_TABLE_NAME: UsersTable

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: user_email
            KeySchema:
              - AttributeName: email 
                KeyType: HASH
            Projection:
              ProjectionType: ALL
                

functions:
  verify-token:
    handler: src/auth/VerifyToken.auth

  login:
    handler: src/auth/AuthHandler.login
    events:
      - http:
          path: login
          method: post
          cors: true

  register:
    handler: src/auth/AuthHandler.register
    events:
      - http:
          path: register
          method: post
          cors: true

  me:
    handler: src/auth/AuthHandler.me
    events:
      - http:
          path: me
          method: get
          cors: true
          authorizer: verify-token

  getUsers:
    handler: src/user/UserHandler.getUsers
    events:
      - http:
          path: users
          method: get
          cors: true

plugins:
  - serverless-dynamodb-local
  - serverless-offline